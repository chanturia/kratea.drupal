{#
/**
 * @file
 * Theme override to display a single page.
 *
 * The doctype, html, head and body tags are not in this template. Instead they
 * can be found in the html.html.twig template in this directory.
 *
 * Available variables:
 *
 * General utility variables:
 * - base_path: The base URL path of the Drupal installation. Will usually be
 *   "/" unless you have installed Drupal in a sub-directory.
 * - is_front: A flag indicating if the current page is the front page.
 * - logged_in: A flag indicating if the user is registered and signed in.
 * - is_admin: A flag indicating if the user has permission to access
 *   administration pages.
 *
 * Site identity:
 * - front_page: The URL of the front page. Use this instead of base_path when
 *   linking to the front page. This includes the language domain or prefix.
 *
 * Page content (in order of occurrence in the default page.html.twig):
 * - messages: Status and error messages. Should be displayed prominently.
 * - node: Fully loaded node, if there is an automatically-loaded node
 *   associated with the page and the node ID is the second argument in the
 *   page's path (e.g. node/12345 and node/12345/revisions, but not
 *   comment/reply/12345).
 *
 * Regions:
 * - page.header: Items for the header region.
 * - page.primary_menu: Items for the primary menu region.
 * - page.secondary_menu: Items for the secondary menu region.
 * - page.highlighted: Items for the highlighted content region.
 * - page.help: Dynamic help text, mostly for admin pages.
 * - page.content: The main content of the current page.
 * - page.sidebar_first: Items for the first sidebar.
 * - page.sidebar_second: Items for the second sidebar.
 * - page.footer: Items for the footer region.
 * - page.breadcrumb: Items for the breadcrumb region.
 *
 * @see template_preprocess_page()
 * @see html.html.twig
 */
#}
{#https://maps.googleapis.com/maps/api/geocode/json?address=Eleftheriou%20Venizelou,%20Pallini&key=AIzaSyDwPsbrlRcHbWJ8UnHsiZaS8ciGnfdUVP8#}
<div id="overlay"></div>
<div class="watermark leftWatermark hide-mobile">www.krateaproperties.com</div>
<div class="watermark rightWatermark hide-mobile">www.krateaproperties.com</div>
<!--FullScreen video-->
{% include directory ~ '/templates/include/bg_video.html.twig' %}
<!--Sidenav-->
{{ page.sidnav }}
<!--Language and navigation-->
{% include directory ~ '/templates/include/headrer.html.twig' %}
<!--Content-->
<section class="mainContainer">
    <div class="cardPageContainer">
        <div class="flexContainer cardPageMainWrapper">
            <div class="cardPageImageWrapper" ng-controller="propertyCarouselController">
                <div class="row">
                    <div fittext fittext-max="40" fittext-min="28" fittex-
                         class="cardPageInfoTitle">{{ node.title.value }}</div>
                </div>
                <div id="mainCarousel" class="owl-carousel">
                    {% for image in get_image_url_from_entity('field_property_image', node) %}
                        <div>
                            <div class="propertyImages"
                                 style="padding-top: 51.6%; background-image: url('{{ image.url }}');">
                                <div class="imageTitle middle-xs row">
                                    <div style="margin-left: 3%;">{{ image.title }}</div>
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                </div>
                <div id="thumbnailCarousel" class="owl-carousel">
                    {% for image in get_image_url_from_entity('field_property_image', node) %}
                        <div class="thumbnailItem">
                            <div class="propertyImages" style="background-image: url('{{ image.url }}');">
                            </div>
                        </div>
                    {% endfor %}
                </div>
            </div>
            <div class="cardPageInfoWrapper">
                <div>
                    <div class="cardPageInfContent positionRelative row">
                        <div class="col-xs-12 col-lg-8">
                            <div class="row">
                                <div class="col-xs-7 propertyField">{{ 'Object ID:'|t() }}</div>
                                <div>{{ node.id }}</div>
                            </div>
                            <div class="row">
                                <div class="propertyFieldDivider"></div>
                            </div>
                            {#{{ (node.field_property_price.value/node.field_property_area.value)|round() }} {{ '€ for m²'|t }}#}
                            <div class="row">
                                <div class="col-xs-7 propertyField">{{ 'Property type:'|t }}</div>
                                <div>{{ node.field_property_type.entity.name.value }}</div>
                            </div>
                            {% if not node.field_property_area.isEmpty %}
                                <div class="row">
                                    <div class="col-xs-7 propertyField">{{ 'living space:'|t }}</div>
                                    <div>{{ node.field_property_area.value }} m²</div>
                                </div>
                            {% endif %}
                            {% if not node.field_land_area.isEmpty %}
                                <div class="row">
                                    <div class="col-xs-7 propertyField">{{ 'Land area:'|t }}</div>
                                    <div>{{ node.field_land_area.value }} m²</div>
                                </div>
                            {% endif %}
                            {% if not node.field_property_price.isEmpty %}
                                <div class="row">
                                    <div class="col-xs-7 propertyField">{{ 'Price:'|t }}</div>
                                    <div>{{ node.field_property_price.value|number_format() }} €</div>
                                </div>
                            {% endif %}
                            {% if not node.field_bathrooms.isEmpty %}
                                <div class="row">
                                    <div class="col-xs-7 propertyField">{{ 'Number of bedrooms:'|t }}</div>
                                    <div>{{ node.field_bathrooms.value }}</div>
                                </div>
                            {% endif %}
                            {% if not node.field_construction_date.isEmpty %}
                                <div class="row">
                                    <div class="col-xs-7 propertyField">{{ 'Year built:'|t }}</div>
                                    <div>{{ node.field_construction_date.value }}</div>
                                </div>
                            {% endif %}
                            {% if not node.field_building_floors.isEmpty %}
                                <div class="row">
                                    <div class="col-xs-7 propertyField">{{ 'Number of floors:'|t }}</div>
                                    <div>{{ node.field_building_floors.value }}</div>
                                </div>
                            {% endif %}
                            {% if not node.field_km_from_the_airport.isEmpty %}
                                <div class="row">
                                    <div class="col-xs-7 propertyField">{{ 'To the airport:'|t }}</div>
                                    <div>{{ node.field_km_from_the_airport.value }} km</div>
                                </div>
                            {% endif %}
                            {% if not node.field_km_from_the_see.isEmpty %}
                                <div class="row">
                                    <div class="col-xs-7 propertyField">{{ 'To the sea:'|t }}</div>
                                    <div>{{ node.field_km_from_the_see.value }} km</div>
                                </div>
                            {% endif %}

                        </div>
                    </div>
                    <div class="bottom-xs row cardPageInfContentMapWrapper">
                        <div ng-click="openMap()" id="mapButton">
                            <img class="responsiveImg" src="/{{ active_theme_path() }}/img/mapMarker.svg"
                                 alt="marker">
                        </div>
                        <div class="showOnMap hide-tablet hide-mobile">{{ 'Show on the map'|t }}</div>
                    </div>
                    <div ng-controller="customScroll" class="customScrollbar">
                        <div class="customScrollbarContent">
                            {{ node.body.value|raw }}
                        </div>
                        <div class="customScrollbar__bar">
                            <div class="customScrollbar__knob"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- Footer start-->
{% include directory ~ '/templates/include/footer.html.twig' %}
<!-- Footer end-->
<!-- The Modal -->
<div class="modalMap">
    <div class="modalMapWrapper">
        <div class="end-xs row">
            <div ng-click="closeMap()" class="closeModal">×</div>
        </div>
        <div class="googleMapWrapper">
            <div id="googleMap"></div>
        </div>
    </div>
</div>
<script>
  function myMap() {
    var geocoder = new google.maps.Geocoder();
    geocoder.geocode({'address': '{{ node.field_property_address.value }}'}, geocoderResult);

    function geocoderResult(result, status) {
      let lat = result[0].geometry.location.lat();
      let lng = result[0].geometry.location.lng();
      var mapProp = {
        center: new google.maps.LatLng(lat, lng),
        zoom: 15,
        disableDefaultUI: true,
        gestureHandling: 'greedy',
        zoomControl: true,
      };
      var map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
      var cityCircle = new google.maps.Circle({
        strokeColor: '#f37100',
        strokeOpacity: 0.8,
        strokeWeight: 2,
        fillColor: '#f37100',
        fillOpacity: 0.35,
        map: map,
        center: {lat, lng},
        radius: 200
      });

      // map.addListener('zoom_changed', function () {
      //   let radius = 100 + map.getZoom();
      //   console.log(radius);
      //   setTimeout(function () {
      //     cityCircle.setRadius(radius);
      //   }, 1);
      // });
    }
  }
</script>
